"use strict";

var _utils = require("./utils");

// TODO: debounce
const target = document.querySelector('.js-sticky-scroll-catch');
const parent = target.parentElement;
let targetHeight = target.offsetHeight;
let parentHeight = parent.offsetHeight;
let scrollDirection;
window.addEventListener('scroll', () => {
  if ((0, _utils.isElmScrolledBottom)(target)) {
    (0, _utils.setActiveState)(_utils.STATES.SCROLL_DOWN_CATCH, target);
  }

  if ((0, _utils.isElmScrolledBottom)(parent)) {
    (0, _utils.setActiveState)(_utils.STATES.SCROLL_BREAK, target);
  } // handle scroll up and 'catch' so scrolls with window


  if (!(0, _utils.isElmScrolledBottom)(target) && scrollDirection) {
    let YAxisSpace = parentHeight - targetHeight;
    let topDistanceFromParent = target.getBoundingClientRect().top - parent.getBoundingClientRect().top;
    let bottomYAxisSpace = YAxisSpace - topDistanceFromParent;
    (0, _utils.setActiveState)(_utils.STATES.UPSCROLL, target);
    target.style.bottom = `${bottomYAxisSpace}px`; // fix to top

    if (target.getBoundingClientRect().top > 0) {
      (0, _utils.setActiveState)(_utils.STATES.SCROLL_TOP, target);
    }
  }

  if (parent.getBoundingClientRect().top >= target.getBoundingClientRect().top) {
    (0, _utils.setActiveState)(_utils.STATES.INITAL, target);
  }

  window.onscroll = function () {
    // print "false" if direction is down and "true" if up
    scrollDirection = this.oldScroll > this.scrollY;
    this.oldScroll = this.scrollY;
  };
}); // for (let i = target.classList.length - 1; i >= 0; i--) {
//     const className = target.classList[i]
//     if (className.startsWith('sticky-scroll-catch-')) {
//       // setActiveState(STATES.INITAL, target)
//       console.log(className)
//     }
//   }