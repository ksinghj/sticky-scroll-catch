{"mappings":"YAAO,ICUHA,EDVSC,EAAsB,SAACC,GAClC,IAAIC,EAAuBC,OAAOC,QAAUD,OAAOE,YAKnD,OAJwBJ,EAAIK,cACGH,OAAOI,YAAcN,EAAIO,wBAAwBC,KAEhBP,GAwBrDQ,EACH,+BADGA,EAEQ,gCAFRA,EAGG,6BAHHA,EAID,gCAJCA,EAKC,oCAIDC,EAAiB,SAACC,EAAoBX,IA7BzB,SAACA,GAAgE,IAA9CY,EAA8CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhC,sBACzDb,EAAIgB,MAAMC,OAAS,KACnB,IAAK,IAAIC,EAAIlB,EAAImB,UAAUL,OAAS,EAAGI,GAAK,EAAGA,IAAK,CAClD,IAAME,EAAYpB,EAAImB,UAAUD,GAC5BE,EAAUC,WAAWT,IACvBZ,EAAImB,UAAUG,OAAOF,IAyBzBG,CAAWvB,GACXA,EAAImB,UAAUK,IAAIb,ICpCdc,EAAsBC,SAASC,cAAc,2BAC7CC,EAAsBH,EAAOI,cAE/BC,EAAuBL,EAAOpB,aAC9B0B,EAAuBH,EAAOvB,aAIlCH,OAAO8B,iBAAiB,UAAU,WAUhC,GATIC,EAAoBR,IACtBS,EAAeC,EAA0BV,GAGvCQ,EAAoBL,IACtBM,EAAeC,EAAqBV,IAIjCQ,EAAoBR,IAAW3B,EAAiB,CACnD,IAEIsC,EAFaL,EAAeD,GACIL,EAAOlB,wBAAwBC,IAAMoB,EAAOrB,wBAAwBC,KAGxG0B,EAAeC,EAAiBV,GAChCA,EAAOT,MAAMC,OAAb,GAAAoB,OAAyBD,EAAzB,MAGIX,EAAOlB,wBAAwBC,IAAM,GACvC0B,EAAeC,EAAmBV,GAIlCG,EAAOrB,wBAAwBC,KAAOiB,EAAOlB,wBAAwBC,KACvE0B,EAAeC,EAAeV,GAGhCvB,OAAOoC,SAAW,WAEhBxC,EAAkByC,KAAKC,UAAYD,KAAKpC,QACxCoC,KAAKC,UAAYD,KAAKpC","sources":["./src/utils/index.ts","./src/index.ts"],"sourcesContent":["export const isElmScrolledBottom = (elm: HTMLElement): boolean => {\n  let bottomScroll: number = window.scrollY + window.innerHeight\n  let elmHeight: number = elm.offsetHeight\n  let elmDistanceToTop: number = window.pageYOffset + elm.getBoundingClientRect().top\n\n  const isScrolledToEnd: boolean = elmHeight + elmDistanceToTop < bottomScroll\n  return isScrolledToEnd\n}\n\nexport const resetStyle = (elm: HTMLElement, classPrefix = 'sticky-scroll-catch'): void => {\n  elm.style.bottom = null\n  for (let i = elm.classList.length - 1; i >= 0; i--) {\n    const className = elm.classList[i]\n    if (className.startsWith(classPrefix)) {\n      elm.classList.remove(className)\n    }\n  }\n}\n\n// when one state is active all others are not\ninterface StatesConfig {\n  INITAL: string\n  SCROLL_DOWN_CATCH: string\n  SCROLL_BREAK: string\n  UPSCROLL: string\n  SCROLL_TOP: string\n  SCROLL_TOP_BREAK: string\n}\n\nexport const STATES: StatesConfig = {\n  INITAL: 'sticky-scroll-catch--initial',\n  SCROLL_DOWN_CATCH: 'sticky-scroll-catch--scrolled',\n  SCROLL_BREAK: 'sticky-scroll-catch--break',\n  UPSCROLL: 'sticky-scroll-catch--upscroll',\n  SCROLL_TOP: 'sticky-scroll-catch--scrolled-top',\n  SCROLL_TOP_BREAK: 'sticky-scroll-catch--initial', // (same as INITIAL, just there for understanding)\n}\n\nexport const setActiveState = (classToAdd: string, elm: HTMLElement): void => {\n  resetStyle(elm)\n  elm.classList.add(classToAdd)\n}\n\n// export const resetState = (elm: HTMLElement): void => {\n//   setActiveState(STATES.INITAL, elm)\n// }\n","import { isElmScrolledBottom, resetStyle, STATES, setActiveState } from './utils'\n\n// TODO: debounce\n\nconst target: HTMLElement = document.querySelector('.js-sticky-scroll-catch')\nconst parent: HTMLElement = target.parentElement\n\nlet targetHeight: number = target.offsetHeight\nlet parentHeight: number = parent.offsetHeight\n\nlet scrollDirection: boolean\n\nwindow.addEventListener('scroll', () => {\n  if (isElmScrolledBottom(target)) {\n    setActiveState(STATES.SCROLL_DOWN_CATCH, target)\n  }\n\n  if (isElmScrolledBottom(parent)) {\n    setActiveState(STATES.SCROLL_BREAK, target)\n  }\n\n  // handle scroll up and 'catch' so scrolls with window\n  if (!isElmScrolledBottom(target) && scrollDirection) {\n    let YAxisSpace = parentHeight - targetHeight\n    let topDistanceFromParent: number = target.getBoundingClientRect().top - parent.getBoundingClientRect().top\n    let bottomYAxisSpace: number = YAxisSpace - topDistanceFromParent\n\n    setActiveState(STATES.UPSCROLL, target)\n    target.style.bottom = `${bottomYAxisSpace}px`\n\n    // fix to top\n    if (target.getBoundingClientRect().top > 0) {\n      setActiveState(STATES.SCROLL_TOP, target)\n    }\n  }\n\n  if (parent.getBoundingClientRect().top >= target.getBoundingClientRect().top) {\n    setActiveState(STATES.INITAL, target)\n  }\n\n  window.onscroll = function () {\n    // print \"false\" if direction is down and \"true\" if up\n    scrollDirection = this.oldScroll > this.scrollY\n    this.oldScroll = this.scrollY\n  }\n})\n\n// for (let i = target.classList.length - 1; i >= 0; i--) {\n//     const className = target.classList[i]\n//     if (className.startsWith('sticky-scroll-catch-')) {\n//       // setActiveState(STATES.INITAL, target)\n//       console.log(className)\n//     }\n//   }\n"],"names":["scrollDirection","isElmScrolledBottom","elm","bottomScroll","window","scrollY","innerHeight","offsetHeight","pageYOffset","getBoundingClientRect","top","STATES","setActiveState","classToAdd","classPrefix","arguments","length","undefined","style","bottom","i","classList","className","startsWith","remove","resetStyle","add","target","document","querySelector","parent","parentElement","targetHeight","parentHeight","addEventListener","$bd69657c3203dd6f45c4b730c5de893$export$isElmScrolledBottom","$bd69657c3203dd6f45c4b730c5de893$export$setActiveState","$bd69657c3203dd6f45c4b730c5de893$export$STATES","bottomYAxisSpace","concat","onscroll","this","oldScroll"],"version":3,"file":"sticky-scroll-catch.HASH_REF_b3a291766b8be980cb826263009d31a1.js.map"}