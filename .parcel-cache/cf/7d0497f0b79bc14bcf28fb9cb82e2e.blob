"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setActiveState = exports.STATES = exports.resetStyle = exports.isElmScrolledBottom = void 0;

const isElmScrolledBottom = elm => {
  let bottomScroll = window.scrollY + window.innerHeight;
  let elmHeight = elm.offsetHeight;
  let elmDistanceToTop = window.pageYOffset + elm.getBoundingClientRect().top;
  const isScrolledToEnd = elmHeight + elmDistanceToTop < bottomScroll;
  return isScrolledToEnd;
};

exports.isElmScrolledBottom = isElmScrolledBottom;

const resetStyle = (elm, classPrefix = 'sticky-scroll-catch') => {
  elm.style.bottom = null;

  for (let i = elm.classList.length - 1; i >= 0; i--) {
    const className = elm.classList[i];

    if (className.startsWith(classPrefix)) {
      elm.classList.remove(className);
    }
  }
}; // when one state is active all others are not


exports.resetStyle = resetStyle;
const STATES = {
  INITAL: 'sticky-scroll-catch--initial',
  SCROLL_DOWN_CATCH: 'sticky-scroll-catch--scrolled',
  SCROLL_BREAK: 'sticky-scroll-catch--break',
  UPSCROLL_CATCH: 'sticky-scroll-catch--upscroll-catch',
  SCROLL_TOP: 'sticky-scroll-catch--scrolled-top',
  SCROLL_TOP_BREAK: 'sticky-scroll-catch--initial' // (same as INITIAL, just there for understanding)

};
exports.STATES = STATES;

const setActiveState = (classToAdd, elm) => {
  resetStyle(elm);
  elm.classList.add(classToAdd);
};

exports.setActiveState = setActiveState;